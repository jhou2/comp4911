FORMAT: 1A
HOST: https://comp4911-stevenhsu.rhcloud.com

# COMP4911 API

# Group Generate Summary Reports
## Reports [/reports/matrix/:project_id]
### Retrieve report for project [GET]

+ Response 200 (application/json)

    + Body
        
            {
            }
            
# Group Generate Work Package Budget
## Reports [/reports/work_package/budget/:workpackage_number]
### Retrieve budget for work package [GET]

+ Response 200 (application/json)

    + Body

            {
            }


# Group Pay Rates Management
## Pay Rates [/pay_rates]
### Retrieve all pay rates [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            [
                {
                }
            ]

+ Response 401
+ Response 403

### Create a pay rate [POST]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

    + Body
        
            {}
            
+ Response 201 (application/json)

    + Body
    
            {}
            
+ Response 400
+ Response 401
+ Response 403
+ Response 409

## Pay Rates [/pay_rates/:pay_level]
### Retrieve all pay rate for a specific pay level [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            {}
            
+ Response 401
+ Response 403
+ Response 404

## Pay Rates [/pay_rates/:pay_level/:year]
### Retrieve a pay rate for a specific pay level and year [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            {}
            
+ Response 401
+ Response 403
+ Response 404

### Update a pay rate [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

    + Body
        
            {}
            
+ Response 200 (application/json)

    + Body
    
            {}

+ Response 400
+ Response 401
+ Response 403
+ Response 404


# Group Projects Management

## Projects [/projects]
### Retrieve all projects [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            [
                {
                }
            ]

+ Response 401
+ Response 403

### Create a project [POST]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

    + Body
        
            {}
            
+ Response 201 (application/json)

    + Body
    
            {}
            
+ Response 400
+ Response 401
+ Response 403
+ Response 409

## Projects [/projects/:project_number]
### Retrieve a project [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            {}
            
+ Response 401
+ Response 403
+ Response 404

### Update a project [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

    + Body
        
            {}
            
+ Response 200 (application/json)

    + Body
    
            {}

+ Response 400
+ Response 401
+ Response 403
+ Response 404

## Projects [/projects/:project_number/users]
### Retrieve all users assigned to project [GET]
Use HTTP Basic Auth username field for the token

+ Response 200 (application/json)

    + Body
        
            {}
            
+ Response 400
+ Response 401
+ Response 403
+ Response 404

## Projects [/projects/:project_number/manager]
### Retrieve manager assigned to project [GET]
Use HTTP Basic Auth username field for token

+ Response 200 (application/json)

    + Body

            {}

+ Response 400
+ Response 401
+ Response 403
+ Response 404

## Project Assignments [/projects/:project_number/assignments]
### Create a project assignment [POST]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

    + Body
            
            {
                "user_id":1
            }

+ Response 200 (application/json)

    + Body
    
            {}
            
+ Response 400
+ Response 401
+ Response 403
+ Response 404
+ Response 409

### Update a project assignment [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            {}

+ Response 400
+ Response 401
+ Response 403
+ Response 404

## Project Assignments [/projects/:project_number/assignments/:user_id]
### Get a project Assignment [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body

            {}

+ Response 400
+ Response 401
+ Response 403
+ Response 404


# Group Timesheets Management
## Timesheets [/timesheets]
### Retrieve all timesheets [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)
    + Body
        
            [
                {
                }
            ]

+ Response 401
+ Response 403

## Timesheets [/timesheets/:timesheet_id]
### Retrieve a timesheet [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            {
            }
            
+ Response 400
+ Response 401
+ Response 403
+ Response 404

### Update a timesheet [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)
    
    + Body
            
            {
            }

+ Response 200 (application/json)

    + Body
    
            {
            }

+ Response 400
+ Response 401
+ Response 403
+ Response 404

# Group User Operations

## User [/user]
### Retrieve authenticated user profile [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200
    + Body
    
            {
                "id": 1,
                "version": 0,
                "username": "q",
                "password": "test-password",
                "firstName": "Apiary",
                "lastName": "Apiary",
                "startDate": "2014-04-03",
                "status": "Active",
                "paidHoursPerWeek": 40,
                "totalFlexTime": 50,
                "vacationDays": 0,
                "defaultTimesheetID": 0,
                "supervisorUserID": 1,
                "timesheetApproverUserID": 1,
                "pLevel": "P5",
                "hr": true
            }

+ Response 401

### Update authenticated user profile [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200
    + Body
    
            {
            }

+ Response 400
+ Response 401

## User Token [/user/token]
### Retrieve token [GET]
Use HTTP Basic Auth for username/password

+ Response 200
    + Body
    
            {
                "user_id": 1,
                "token":"test-token"
            }

+ Response 400
+ Response 401

### Retrieve token [POST]

+ Request (application/json)
    + Body
            
            {
                "username":"<username>",
                "password":"<password>"
            }

+ Response 200
    + Body
    
            {
                "user_id": 1,
                "token":"test-token"
            }

+ Response 400
+ Response 401

### Invalidate token [DELETE]
+ Response 204
+ Response 401

## User Permissions [/user/permissions]
### Retrieve permissions [GET]
Get user permissions

+ Response 200
    + Body

            [
                {
                    "name": "Hr"
                },
                {
                    "name": "ProjectManager"
                },
                {
                    "name": "Supervisor"
                },
                {
                    "name": "TimesheetApprover"
                },
                {
                    "name": "ResponsibleEngineer"
                }
            ]

+ Response 401

## User Projects [/user/projects]
### Retrieve all projects assigned to authenticated user [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200
    + Body

            [
                {
                    "projectNumber": 12345,
                    "version": 0,
                    "projectName": "Apollo",
                    "issueDate": "2014-01-01",
                    "completeDate": null,
                    "clientRate": 1.2,
                    "unAllocatedBudget": 0,
                    "allocatedBudget": 500000
                }
            ]

+ Response 401

## User Managed Projects [/user/projects/managed]
### Retrieve all projects managed by the current user.
Authenticate using HTTP Basic Auth (token as the username) or use query paramater of: token=<token>.
+ Response 200
    + Body
    
            [
                {
                }
            ]

+ Response 401

## User Peons [/user/peons]
### Retrieve all peons managed by the current user.
Authenticate using HTTP Basic Auth (token as the username) or use query paramater of: token=<token>.
+ Response 200
    + Body
    
            [
                {
                }
            ]

+ Response 401

## User Timesheets [/user/timesheets]
### Retrieve all timesheets of authenticated user [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.
Use query parameter of: filter=default to limt the results to only the default timesheet
Use query parameter of: filter=current to limit the results to only the current week.

+ Response 200
    + Body
    
            [
                {
                }
            ]

+ Response 401

## User Timesheets [/user/timesheets/to_approve]
### Retrieve all timesheets the authenticated user is responsible for checking [GET]
+ Resonse 200
    + Body

        [
            {
            }
        ]

+ Response 401

### Create a timesheet for authenticated user [POST]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)
    + Body
            
            {
            }

+ Response 201 (application/json)
    + Body

            {
            }

+ Response 400
+ Response 401
+ Response 409

## User Timesheets Approve [/user/timesheets/to_be_approved]
### Retrieve all timesheets that required to be approved for authenticated user [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200
    + Body
    
            [
                {
                }
            ]

+ Response 401

## User Timesheets Rejected [/user/timesheets/rejected]
### Retrieve all timesheets that got rejected and need revision for authenticated user [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200
    + Body
    
            [
                {
                }
            ]

+ Response 401

## User Work Packages [/user/work_packages]
### Retrieve all work packages assigned to authenticated user [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200
    + Body
    
            [
                {
                }
            ]

+ Response 401

# Group Users Management
## Users [/users]
### Retrieve all users [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200
    + Body
    
            [
                {
                "id": 1,
                "version": 0,
                "username": "q",
                "password": "$2a$10$KXZMtKCY6ZOe3GUoQ1d.LOfWSRea8Q4xXxcu5jtpjfHE5CI0Nn4JO",
                "firstName": "FirstName",
                "lastName": "LastName",
                "startDate": "2014-04-03",
                "status": "Active",
                "paidHoursPerWeek": 40,
                "totalFlexTime": 50,
                "vacationDays": 0,
                "defaultTimesheetID": 0,
                "supervisorUserID": 0,
                "timesheetApproverUserID": 0,
                "pLevel": "P5",
                "hr": true
                },
                {
                "id": 2,
                "version": 0,
                "username": "username0@example.com",
                "password": "$2a$10$opLiY8keyJTT0qvoZgT32uhFJEpZPGNBOfHkV2EQ.TzliFsn9upJG",
                "firstName": "Bruce",
                "lastName": "Link",
                "startDate": "2014-04-03",
                "status": "Active",
                "paidHoursPerWeek": 40,
                "totalFlexTime": 0,
                "vacationDays": 0,
                "defaultTimesheetID": 0,
                "supervisorUserID": 1,
                "timesheetApproverUserID": 1,
                "pLevel": "P5",
                "hr": true
                },
                {
                "id": 3,
                "version": 0,
                "username": "jedward@example.com",
                "password": "$2a$10$h1/JlLXmidDTthHYzHfLbuGY7VEGW3xgH5s1ybZ2AmiaJp.SYSgrO",
                "firstName": "John",
                "lastName": "Edward",
                "startDate": "2000-01-01",
                "status": "Active",
                "paidHoursPerWeek": 40,
                "totalFlexTime": 0,
                "vacationDays": 14,
                "defaultTimesheetID": 12345678,
                "supervisorUserID": 1,
                "timesheetApproverUserID": 1,
                "pLevel": "P1",
                "hr": false
                },
                {
                "id": 4,
                "version": 0,
                "username": "awong@example.com",
                "password": "$2a$10$eC1ma3GjlH2ZiO6EnGGKI.S7wvNd8N1VP3ivXeOmpWU0kFUQr/g8i",
                "firstName": "Alice",
                "lastName": "Wong",
                "startDate": "2000-01-01",
                "status": "Active",
                "paidHoursPerWeek": 40,
                "totalFlexTime": 0,
                "vacationDays": 14,
                "defaultTimesheetID": 23456789,
                "supervisorUserID": 1,
                "timesheetApproverUserID": 1,
                "pLevel": "P2",
                "hr": false
                },
                {
                "id": 5,
                "version": 0,
                "username": "bnelson@example.com",
                "password": "$2a$10$Z37Y2/P13eiWSMNBzAD37O5j5/bsDRCKFdSwm.iAMlYUKpsfvj7eq",
                "firstName": "Bob",
                "lastName": "Nelson",
                "startDate": "2000-01-01",
                "status": "Active",
                "paidHoursPerWeek": 40,
                "totalFlexTime": 0,
                "vacationDays": 14,
                "defaultTimesheetID": 34567890,
                "supervisorUserID": 56789012,
                "timesheetApproverUserID": 56789012,
                "pLevel": "P3",
                "hr": false
                }
            ]

+ Response 401
+ Response 403

### Create a user [POST]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

        {
        }

+ Response 201
    + Body
    
            {
            }

+ Response 400
+ Response 401
+ Response 403
+ Response 409

## Users [/users/:user_id]
### Retrieve a user profile [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200
    + Body
    
            {
            }

+ Response 401
+ Response 403
+ Response 404

### Update a user profile [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

        {
        }

+ Response 200 (application/json)
    + Body
    
            {
            }

+ Response 400
+ Response 401
+ Response 403
+ Response 404

##  Users [/users/:user_id/projects]
### Retrieve all Projects a user has been assigned to [GET].
+ Response 200
    + Body
        [
           {
           }
        ]
+ Response 400
+ Response 401
+ Response 403
+ Response 404

##  Users [/users/:user_id/workpackages]
### Retrieve all Work Packages a user has been assigned to [GET].
+ Response 200
    + Body
        [
           {
           }
        ]
+ Response 400
+ Response 401
+ Response 403
+ Response 404

# Group Work Packages Management
## Work Packages [/work_packages]
### Retrieve all work packages [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            [
                {
                }
            ]
            
+ Response 401
+ Response 403

### Create a work package [POST]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

    + Body
        
            {
            }
            
+ Response 201 (application/json)

    + Body
    
            {
            }
            
+ Response 400
+ Response 401
+ Response 403
+ Response 409

## Work Packages [/work_packages/:wp_id]

### Retrieve a work package [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            {
            }
            
+ Response 401
+ Response 403
+ Response 404

### Update a work package [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

    + Body
        
            {
            }
            
+ Response 200 (application/json)

    + Body
    
            {
            }
            
+ Response 400
+ Response 401
+ Response 403
+ Response 404

### Delete a work package [DELETE]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 204
+ Response 401
+ Response 403
+ Response 404

## Work Package Assignments [/work_packages/:wp_id/assignments]
### Create a work package assignment [POST]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Request (application/json)

    + Body
            
            {
                "user_id":1
            }

+ Response 201 (application/json)

    + Body
    
            {
            }
            
+ Response 400
+ Response 401
+ Response 403
+ Response 404
+ Response 409

## Work Package Assignments [/work_packages/:wp_id/assignments/:user_id]
### Update a work package assignment [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            {}

+ Response 400
+ Response 401
+ Response 403
+ Response 404

# Group Work Package Status Reports
## Status Reports [/work_packages/:wp_id/status_reports]
### Retrieve all reports [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            [
                {
                }
            ]
            
+ Response 401
+ Response 403
+ Response 404
+ Response 409

### Create a report [POST]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 201 (application/json)

    + Body
    
            {}

+ Response 400
+ Response 401
+ Response 403
+ Response 404
+ Response 409

## Status Reports [/work_packages/:wp_id/status_reports/:report_id]
### Retrieve report [GET]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            [
                {
                }
            ]
            
+ Response 401
+ Response 403
+ Response 404
+ Response 409


### Update a report [PUT]
Authenticate using HTTP Basic Auth (token as the username) or use query parameter of: token=<token>.

+ Response 200 (application/json)

    + Body
    
            {}

+ Response 400
+ Response 401
+ Response 403
+ Response 404

